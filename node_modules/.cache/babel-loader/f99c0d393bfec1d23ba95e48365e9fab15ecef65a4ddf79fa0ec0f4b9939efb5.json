{"ast":null,"code":"/**\n * * Disallow template literal placeholder syntax in regular strings\n */\n/* eslint-disable no-template-curly-in-string */\n// import printValue from \"yup/lib/util/printValue\";\n\nexport let mixed = {\n  default: \"${path} es invalido\",\n  required: \"${path} es un campo obligatorio\",\n  oneOf: \"${path} debe ser uno de los siguientes valores: ${values}\",\n  notOneOf: \"${path} no debe ser uno de los siguientes valores: ${values}\",\n  // notType: ({ path, type, value, originalValue }) => {\n  //   let isCast = originalValue != null && originalValue !== value;\n  //   let msg =\n  //     `${path} debe ser de tipo \\`${type}\\` , ` +\n  //     `pero el valor final fue: \\`${printValue(value, true)}\\`` +\n  //     (isCast\n  //       ? ` (emitido desde el valor \\`${printValue(originalValue, true)}\\`).`\n  //       : \".\");\n\n  //   if (value === null) {\n  //     msg += `\\n Si \"nulo\" pretende ser un valor vacío, asegúrese de marcar el esquema como \\`.nullable()\\``;\n  //   }\n\n  //   return msg;\n  // },\n  notType: \"${path} tiene un valor no valido\",\n  defined: \"${path} debe ser definido\"\n};\nexport let string = {\n  length: \"${path} debe tener exactamente ${length} caracteres\",\n  min: \"${path} debe tener al menos ${min} caracteres\",\n  max: \"${path} debe tener como máximo  ${max} caracteres\",\n  matches: '${path} debe coincidir con lo siguiente: \"${regex}\"',\n  email: \"${path} debe ser un correo electrónico válido\",\n  url: \"${path} debe ser una URL válida\",\n  trim: \"${path} debe ser una cadena recortada\",\n  lowercase: \"${path} debe ser una cadena en minúscula\",\n  uppercase: \"${path} debe ser una cadena en mayúscula\"\n};\nexport let number = {\n  min: \"${path} debe ser mayor o igual que ${min}\",\n  max: \"${path} debe ser menor o igual que ${max}\",\n  lessThan: \"${path} debe ser menor que ${less}\",\n  moreThan: \"${path} debe ser mayor que ${more}\",\n  notEqual: \"${path} no debe ser igual a ${notEqual}\",\n  positive: \"${path} debe ser un número positivo\",\n  negative: \"${path} debe ser un número negativo\",\n  integer: \"${path} debe ser un entero\"\n};\nexport let date = {\n  min: \"${path} debe ser posterior a${min}\",\n  max: \"${path} debe ser anterior a ${max}\"\n};\nexport let boolean = {};\nexport let object = {\n  noUnknown: \"${path} tiene claves no especificadas: ${unknown}\"\n};\nexport let array = {\n  min: \"${path} debe tener al menos ${min} elementos\",\n  max: \"${path} debe tener menos o igual que ${max} elementos\"\n};\nlet result = {\n  mixed,\n  string,\n  number,\n  date,\n  object,\n  array,\n  boolean\n};\nexport default result;","map":{"version":3,"names":["mixed","default","required","oneOf","notOneOf","notType","defined","string","length","min","max","matches","email","url","trim","lowercase","uppercase","number","lessThan","moreThan","notEqual","positive","negative","integer","date","boolean","object","noUnknown","array","result"],"sources":["/home/desa04/Escritorio/ConsumoRestAPI/school-manager-frontend-app/src/resources/lang/es/validation.js"],"sourcesContent":["/**\n * * Disallow template literal placeholder syntax in regular strings\n */\n/* eslint-disable no-template-curly-in-string */\n// import printValue from \"yup/lib/util/printValue\";\n\nexport let mixed = {\n  default: \"${path} es invalido\",\n  required: \"${path} es un campo obligatorio\",\n  oneOf: \"${path} debe ser uno de los siguientes valores: ${values}\",\n  notOneOf: \"${path} no debe ser uno de los siguientes valores: ${values}\",\n  // notType: ({ path, type, value, originalValue }) => {\n  //   let isCast = originalValue != null && originalValue !== value;\n  //   let msg =\n  //     `${path} debe ser de tipo \\`${type}\\` , ` +\n  //     `pero el valor final fue: \\`${printValue(value, true)}\\`` +\n  //     (isCast\n  //       ? ` (emitido desde el valor \\`${printValue(originalValue, true)}\\`).`\n  //       : \".\");\n\n  //   if (value === null) {\n  //     msg += `\\n Si \"nulo\" pretende ser un valor vacío, asegúrese de marcar el esquema como \\`.nullable()\\``;\n  //   }\n\n  //   return msg;\n  // },\n  notType: \"${path} tiene un valor no valido\",\n  defined: \"${path} debe ser definido\",\n};\n\nexport let string = {\n  length: \"${path} debe tener exactamente ${length} caracteres\",\n  min: \"${path} debe tener al menos ${min} caracteres\",\n  max: \"${path} debe tener como máximo  ${max} caracteres\",\n  matches: '${path} debe coincidir con lo siguiente: \"${regex}\"',\n  email: \"${path} debe ser un correo electrónico válido\",\n  url: \"${path} debe ser una URL válida\",\n  trim: \"${path} debe ser una cadena recortada\",\n  lowercase: \"${path} debe ser una cadena en minúscula\",\n  uppercase: \"${path} debe ser una cadena en mayúscula\",\n};\n\nexport let number = {\n  min: \"${path} debe ser mayor o igual que ${min}\",\n  max: \"${path} debe ser menor o igual que ${max}\",\n  lessThan: \"${path} debe ser menor que ${less}\",\n  moreThan: \"${path} debe ser mayor que ${more}\",\n  notEqual: \"${path} no debe ser igual a ${notEqual}\",\n  positive: \"${path} debe ser un número positivo\",\n  negative: \"${path} debe ser un número negativo\",\n  integer: \"${path} debe ser un entero\",\n};\n\nexport let date = {\n  min: \"${path} debe ser posterior a${min}\",\n  max: \"${path} debe ser anterior a ${max}\",\n};\n\nexport let boolean = {};\n\nexport let object = {\n  noUnknown: \"${path} tiene claves no especificadas: ${unknown}\",\n};\n\nexport let array = {\n  min: \"${path} debe tener al menos ${min} elementos\",\n  max: \"${path} debe tener menos o igual que ${max} elementos\",\n};\n\nlet result = {\n  mixed,\n  string,\n  number,\n  date,\n  object,\n  array,\n  boolean,\n};\n\nexport default result;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIA,KAAK,GAAG;EACjBC,OAAO,EAAE,qBAAqB;EAC9BC,QAAQ,EAAE,iCAAiC;EAC3CC,KAAK,EAAE,2DAA2D;EAClEC,QAAQ,EAAE,8DAA8D;EACxE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACAC,OAAO,EAAE,kCAAkC;EAC3CC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,IAAIC,MAAM,GAAG;EAClBC,MAAM,EAAE,qDAAqD;EAC7DC,GAAG,EAAE,+CAA+C;EACpDC,GAAG,EAAE,mDAAmD;EACxDC,OAAO,EAAE,qDAAqD;EAC9DC,KAAK,EAAE,+CAA+C;EACtDC,GAAG,EAAE,iCAAiC;EACtCC,IAAI,EAAE,uCAAuC;EAC7CC,SAAS,EAAE,0CAA0C;EACrDC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,IAAIC,MAAM,GAAG;EAClBR,GAAG,EAAE,2CAA2C;EAChDC,GAAG,EAAE,2CAA2C;EAChDQ,QAAQ,EAAE,oCAAoC;EAC9CC,QAAQ,EAAE,oCAAoC;EAC9CC,QAAQ,EAAE,yCAAyC;EACnDC,QAAQ,EAAE,qCAAqC;EAC/CC,QAAQ,EAAE,qCAAqC;EAC/CC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,IAAIC,IAAI,GAAG;EAChBf,GAAG,EAAE,oCAAoC;EACzCC,GAAG,EAAE;AACP,CAAC;AAED,OAAO,IAAIe,OAAO,GAAG,CAAC,CAAC;AAEvB,OAAO,IAAIC,MAAM,GAAG;EAClBC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,IAAIC,KAAK,GAAG;EACjBnB,GAAG,EAAE,8CAA8C;EACnDC,GAAG,EAAE;AACP,CAAC;AAED,IAAImB,MAAM,GAAG;EACX7B,KAAK;EACLO,MAAM;EACNU,MAAM;EACNO,IAAI;EACJE,MAAM;EACNE,KAAK;EACLH;AACF,CAAC;AAED,eAAeI,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}